lexer: {{
    start: "root"

    root ->
        - import: commentL
        - when: /</ tag: "lbracket" goto: tagName
        - when: /[^<]+/ tag: "text"

    tagName -> 
        - when: /script[a-z_A-Z\d\-:!]+/ 
            tag:"word" 
            highlight: "tag"
            set: tagAttr
        - when: /script(?!:[a-z])/ 
            tag:"word" 
            highlight: "tag"
            set: scriptAttr

        - when: /[a-z_A-Z:!][a-z_A-Z\d\-:!]*/ 
            tag:"word" 
            highlight: "tag"
            set: tagAttr
        - when: "/" tag: "slash" 
    
    tagAttr -> 
        - when: /[a-z_A-Z:!][a-z_A-Z\d\-:!]*/ 
            tag:"word" 
            highlight: "attribute.name"
        - when: /\s+/ tag: "space" 
        - when: "=" tag: "="
        - when: ">" tag: "rbracket"  pop
        - when: "/" tag: "slash" 
        - import: json
    
    scriptAttr -> 
        - when: /[a-z_A-Z:!][a-z_A-Z\d\-:!]*/ 
            tag:"word" 
            highlight: "attribute.name"
        - when: /\s+/ tag: "space" 
        - when: "=" tag: "="
        - when: ">" tag: "rbracket"  set: scriptClose
        - when: "/" tag: "slash" 
        - import: json

    scriptClose ->
        unmatched: "text"
        -when: "</script>" 
            tag: "close"
            highlight: "tag" 
            pop

    commentL ->
        - when: "<!--" tag: "lcomment" goto: commentR

    commentR ->
        unmatched: "text"
        - when: "-->" tag: "rcomment" pop

    json ->
        - when: /\s+/ tag: "space"
        - when: /-?(?:[0-9]|[1-9][0-9]+)(?:\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\b/ tag: "number" highlight: "number"
        - when: /"/ tag: "dquote" highlight:"attribute.value" goto: json_string 
        - when: "{" tag: "{"  goto: json
        - when: "}" tag: "}" pop
        - when: "[" tag: "[" highlight:"delimiter" goto: json
        - when: "]" tag: "]" pop
        - when: "," tag: "," 
        - when: ":" tag: ":"
        - when: "true" tag: "true" highlight: "keyword"
        - when: "false" tag: "false" highlight: "keyword"
        - when: "null" tag: "null" highlight: "keyword"

    json_string ->
        - when: /\\[\\\/bnrft]/ tag: "escaped" highlight:"constant"
        - when: /\\"/ tag: "quoteEscape"
        - when: /\\u[A-Fa-f\d]{4}/ tag: "escaped" highlight:"constant"
        - when: /\\./ tag:"badEscape"
        - when: /[^"\\]+/ tag: "string" highlight:"string"
        - when: "\"" tag: "dquote" highlight:"string" pop
}}

grammar: {{
    // Uncomment the line below to allow experimental diagram generation
	// postprocessorOverride: ${ _ =>_ }

    XMLPlus -> Node : {{ { nodes: $0 ?[$0]:[] } }}
        | XMLPlus _ Node : {{ { nodes: $2 ? $0.nodes.concat($2): $0.nodes }  }}

    Node : {{ $0 }} 
        -> Element
        | Text
        | Comment : {{ null }}
        | Script

    Text -> $text : {{ { text: $0.value } }}

    Comment -> $lcomment $text $rcomment : {{ null }}

    Element -> ElementOpen _ ">" _ XMLPlus _ ElementClose : {{ { tag: $0.tag, attributes: $0.attributes , nodes: $4.nodes} }}
        | ElementOpen  _ "/" ">" : {{ { tag: $0.tag, attributes: $0.attributes, nodes:[] } }}
        | ElementOpen _ ">"  _ ElementClose : {{ { tag: $0.tag, attributes: $0.attributes , nodes: [] } }}

    ElementOpen -> "<" $word __ XMLPlusAttributes : {{ { tag: $1.value, attributes: $3 } }}
        | "<" $word : {{ { tag: $1.value, attributes: [] } }}
    
    ElementClose ->  "<" "/" $word ">" 

    Script -> ScriptOpen _ ">" _ Text _ ScriptClose : {{ { tag: $0.tag, attributes: $0.attributes , nodes: [$4]} }}
        | ScriptOpen  _ "/" ">" : {{ { tag: $0.tag, attributes: $0.attributes, nodes:[] } }}
        | ScriptOpen _ ">"  _ ScriptClose : {{ { tag: $0.tag, attributes: $0.attributes , nodes: [] } }}

    ScriptOpen -> "<" "script" __ XMLPlusAttributes : {{ { tag: $1.value, attributes: $3 } }}
        | "<" "script" : {{ { tag: $1.value, attributes: [] } }}
    
    ScriptClose ->  "</script>" 

    XMLPlusAttributes -> XMLPlusAttr : {{ { [$0.key]: $0.value } }}
        | XMLPlusAttributes _ XMLPlusAttr : {{ { ...$0 ,[$2.key]: $2.value }  }} 

    XMLPlusAttr -> $word "=" Json : {{ { key: $0.value, value: $2 } }}
        | $word : {{ { key:$0.value , value: '' } }}

    Json : {{ $0 }} ->
        Object 
        | Array
        | String
        | Number 
        | "true" : {{ true }}
        | "false" : {{ false }}
        | "null" : {{ null }}

    String -> $dquote $dquote : {{ "" }}
            | $dquote StringInner  $dquote : {{ $1 }}

    StringInner -> StringEscape : {{ $0 }}
        | $string : {{  $0.value }}
        | StringInner StringEscape : {{ $0 + $1 }}
        | StringInner $string : {{ $0 + $1.value }}
    
    StringEscape -> $escaped : {{  JSON.parse('"' +$0.value + '"') }}
        | $quoteEscape : {{ $0.value[1] }}

    Object -> "{" _ "}" : {{ {} }}
        | "{" _ JsonAttributes _ "}"  : {{ $2 }}

    Array -> "[" _ "]" : {{ [] }}
        | "[" _ Json_list _ "]"  : {{ $2 }} 

    Json_list -> Json : {{ [ $0 ] }}
        | Json_list _ "," _ Json : {{ $0.concat($4) }}
    
    JsonAttributes -> JsonAttr : {{ $0 }}
        | JsonAttributes _ "," _ JsonAttr : {{ { ...$0, ...$4 } }}

    JsonAttr -> String:k _ ":" _ Json:v : {{ { [$k]: $v } }}

    Number -> $number : {{ Number($0.value) }}

    _ -> $space?
    __ -> $space
}}
